name: Deploy to Server

on:
  push:
    branches:
      - develop # Trigger on push to develop branch

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production # Specify the environment to access its secrets

    steps:
      - name: Checkout code # Required to access the code for building/testing
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24' # Specify your Go version

      - name: Download dependencies
        run: go mod download

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Server to Known Hosts
        # Add the server's host key to known_hosts to avoid interactive confirmation
        # -H hashes the hostname for security
        run: ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        run: |
          # Connect to the server and execute commands
          # StrictHostKeyChecking=no is used here as a fallback, but ssh-keyscan above should make it unnecessary
          # Use HEREDOC (<< 'EOF') to pass a multi-line script
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "Navigating to project directory..."
            cd ${{ secrets.SERVER_PROJECT_PATH }} # Change to the project directory on the server

            echo "Pulling latest changes from develop branch..."
            git checkout develop # Switch to develop branch (just in case)
            git pull origin develop # Pull the latest changes

            echo "Building and restarting Docker containers..."
            # Rebuild images (if Dockerfile changed) and restart containers in detached mode
            docker compose up -d --build

            echo "Cleaning up dangling Docker images..." # Optional: Remove old, unused images
            docker image prune -f

            echo "Deployment finished successfully."
          EOF
